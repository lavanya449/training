1.
Memory Layout of C Program
 
A typical memory representation of a C program consists of the following sections.
1. Text segment  (i.e. instructions)
2. Initialized data segment 
3. Uninitialized data segment  (bss)
4. Heap 
5. Stack
 


1. Text Segment: 
A text segment, also known as a code segment or simply as text.As a memory region, a text segment may be placed below the heap or stack in order to prevent heaps and stack overflows from overwriting it. 
 the text segment is often read-only, to prevent a program from accidentally modifying its instructions.


2. Initialized Data Segment: 
Initialized data segment, usually called simply the Data Segment. A data segment is a portion of the virtual address space of a program, which contains the global variables and static variables that are initialized by the programmer.ote that, the data segment is not read-only, since the values of the variables can be altered at run time.
This segment can be further classified into the initialized read-only area and the initialized read-write area.


3. Uninitialized Data Segment: 
Uninitialized data segment often called the “bss” segment, named after an ancient assembler operator that stood for “block started bu symbol"
uninitialized data starts at the end of the data segment and contains all global variables and static variables that are initialized to zero or do not have explicit initialization in source code.


4. Stack: 
The stack area traditionally adjoined the heap area and grew in the opposite direction; when the stack pointer met the heap pointer, free memory was exhausted. (With modern large address spaces and virtual memory techniques they may be placed almost anywhere, but they still typically grow in opposite directions.)



5. Heap: 
Heap is the segment where dynamic memory allocation usually takes place.
The heap area begins at the end of the BSS segment and grows to larger addresses from there. The Heap area is managed by malloc, realloc, and free, which may use the brk and sbrk system calls to adjust its size 
The Heap area is shared by all shared libraries and dynamically loaded modules in a process.


